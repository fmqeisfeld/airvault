# connection properties
connection:
    host: postgres # gateway of pg-container
    db: postgres
    port: 5432
    user: postgres
    pw: postgres
    schemas:
      source: quelle
      stage: stage 
      edwh: edwh

rv:   # raw vault
  hubs:
    h_customer:         # name der hub-tabelle
      hk: hk_customer     # benamung des hashkeys in zieltabelle
      bk: customer_id     # benamung des bks in der zieltabelle. Quasi die Klartext-version vom PK (es kann mehrere quellen geben)
      overwrite: False      # drop & recreate ? (tbd)

      src:                  # hub kann mehrere quellen haben                 
        customer:           # erste quelle
          bkeycode: default # collision-code optional, defaults to 'default'
          tenant: default   # tenant-id, defaults to 'default'                  
          bks:              # namen der/des bk-felds in quelle          
            - customer_id   # Bei Angabe mehrerer Quellfelder          

    h_staff:
      hk: hk_staff
      bk: staff_id
      overwrite: False

      src:
        staff:
          bks: 
            - staff_id

    h_inventory:
      hk: hk_inventory
      bk: inventory_id
      overwrite: False

      src:
        inventory:
          bks:
          - inventory_id

    h_film:
      hk: hk_film
      bk: film_id
      overwrite: False

      src:
        film:
          bks:
            - film_id

    h_actor:
      hk: hk_actor
      bk: actor_id
      overwrite: False

      src:
        actor:
          bks:
            - actor_id
  links:
    l_rental:           # name der link-tabelle
      hk: hk_rental     # name von pk der link-tabelle
      hks:                          # namen der hks der hubs
        - hk_inventory
        - hk_staff
        - hk_customer
      overwrite: False

      cks:
        rental_id: rental_id       # child keys (geht nicht in hash rein, hat keine gehashte version und hat auch keinen zugeh. hub)
                                    # kann auch benutzt werden, wenn man nur aus gründen der wiederherstellbarkeit der quelle, ein attr. mitschelleppen will
                                    # "don't split unit of work"
                                    # falls eine der quellen nicht über dieses Feld verfügt, wird hierfür zerokey (=-1) eingesetzt

      src:                          # link kann mehrere quellen haben
        rental:                     # erste quelle
          bkeycode: default         # optionaler collision code (geht ein in hash, defaults to 'default')
          tenant: default           # optional für multi-tenancy (geht in hash rein, defaults to 'default')
          bks:                      # link verknüpft mehrere hubs -> mindestens 2 bks pro quelle nötig. Reihenfolge wichtig für hashing
            inventory_id: hk_inventory       # bk aus quelle (des zugeh. hubs) und name des gehashten keys in link-tabelle
            staff_id: hk_staff
            customer_id: hk_customer # beispiel für composite-key: verschiedene quell-felder mappen zum selben hk

    l_film_actor:
      hk: hk_film_actor
      hks:
        - hk_film
        - hk_actor
      src:
        film_actor:
          bks:
            film_id: hk_film
            actor_id: hk_actor

  sats:
    s_rental:
      hk: hk_rental
      cks:
        inventory_id: inventory_id
      #multiactive: true     # defaults to 'false' 
      attrs:                 # benamung der attribute in der ziel-tabelle
        - rental_date
      src:
        rental:
          bks:
            - inventory_id
            - staff_id
            - customer_id
          attrs:            # mapping der attributnamen quelltabelle -> zieltabelle
            rental_date: rental_date

    s_film:
      hk: hk_film
      attrs:
        - title
        - release_year
      src:
        film:
          bks:
            - film_id
          attrs:
            title: title
            release_year: release_year

    s_actor:
      hk: hk_actor
      attrs:
        - first_name
        - last_name
      src:
        actor:
          bks:
            - actor_id
          attrs:
            first_name: first_name
            last_name: last_name

bv:
  hubs:
    bv_h_customer:         # name der hub-tabelle
      hk: hk_customer     # benamung des hashkeys in zieltabelle
      bk: customer_id     # benamung des bks in der zieltabelle. Quasi die Klartext-version vom PK (es kann mehrere quellen geben)
      overwrite: False      # drop & recreate ? (tbd)

      src:                  # hub kann mehrere quellen haben                 
        customer_sql:         # erste "quelle": das ist keine echte table, sondern wird nur für rec_src-feld benutzt
          bkeycode: default # collision-code optional, defaults to 'default'
          tenant: default   # tenant-id, defaults to 'default'                  
          bks:              # namen der/des bk-felds in quelle          
            - customer_id   # Bei Angabe mehrerer Quellfelder

          sql: "SELECT * FROM quelle.customer"
    
  links:
    bv_l_rental: 
      hk: hk_rental
      hks:                          
        - hk_inventory
        - hk_staff
        - hk_customer
      overwrite: False

      cks:
        rental_id: rental_id    
      
      src:                          
        rental_sql:
          bkeycode: default         
          tenant: default           
          bks:                      
            inventory_id: hk_inventory
            staff_id: hk_staff
            customer_id: hk_customer

          sql: "SELECT * FROM quelle.rental"

  sats:
    bv_es_rental:
      effectivity: l_rental
      hk: hk_rental # muss genauso heissen wie beim parent link
      hks:
        - hk_inventory
        - hk_staff
        - hk_customer
      
      src:
        mysql:
          bkeycode: default
          tenant: default
          bks: 
            inventory_id: hk_inventory
            staff_id: hk_staff
            customer_id: hk_customer
          dks:                       # driver-key(s)
            - inventory_id
            - staff_id 
          sql: "SELECT * FROM quelle.rental"

    bv_s_rental:
      hk: hk_rental
      cks:
        inventory_id: inventory_id
      #multiactive: true     # defaults to 'false' 
      attrs:                 # benamung der attribute in der ziel-tabelle
        - rental_date
      src:
        foo_sql:
          bks:
            - inventory_id
            - staff_id
            - customer_id
          attrs:            # mapping der attributnamen quelltabelle -> zieltabelle
            rental_date: rental_date          
          sql: "SElECT * FROM quelle.rental"

      dependencies:  
        - load__bv_h_customer

    